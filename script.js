// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let energy = 0;
let level = 1;
let currentEnemyHealth = 100;
let maxEnemyHealth = 100;
let clickDamage = 1;
let enemyDefeated = 0;

// –û—Ä—É–∂–∏–µ
const weapons = [
    { id: 1, name: "–õ–∞–∑–µ—Ä–Ω—ã–π –ø–∏—Å—Ç–æ–ª–µ—Ç", damage: 1, cost: 50, img: "üî´", owned: false },
    { id: 2, name: "–ü–ª–∞–∑–º–µ–Ω–Ω–∞—è –ø—É—à–∫–∞", damage: 5, cost: 200, img: "üí•", owned: false },
    { id: 3, name: "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –º–µ—á", damage: 10, cost: 500, img: "‚öîÔ∏è", owned: false },
    { id: 4, name: "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –±–æ–º–±–∞", damage: 20, cost: 1000, img: "üí£", owned: false },
];

// –ù–∞–≤—ã–∫–∏
const skills = [
    { id: 1, name: "–£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏", description: "+1 —É—Ä–æ–Ω –∑–∞ –∫–ª–∏–∫", cost: 100, unlocked: false },
    { id: 2, name: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä", description: "–®–∞–Ω—Å 10% –Ω–∞ 2x —É—Ä–æ–Ω", cost: 200, unlocked: false },
    { id: 3, name: "–ê–≤—Ç–æ-—Å—Ç—Ä–µ–ª—å–±–∞", description: "1 —É—Ä–æ–Ω –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É", cost: 300, unlocked: false },
];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const energyElement = document.getElementById('energy');
const levelElement = document.getElementById('level');
const healthElement = document.getElementById('health');
const enemyImg = document.getElementById('enemy-img');
const clickArea = document.getElementById('click-area');
const clickEffect = document.getElementById('click-effect');
const weaponsContainer = document.getElementById('weapons');
const skillTreeContainer = document.getElementById('skill-tree');

// –ö–ª–∏–∫ –ø–æ –≤—Ä–∞–≥—É
clickArea.addEventListener('click', (e) => {
    // –£—Ä–æ–Ω –≤—Ä–∞–≥—É
    currentEnemyHealth -= clickDamage;
    updateEnemyHealth();

    // –≠—Ñ—Ñ–µ–∫—Ç –∫–ª–∏–∫–∞
    const x = e.clientX - clickArea.getBoundingClientRect().left;
    const y = e.clientY - clickArea.getBoundingClientRect().top;
    clickEffect.style.left = `${x - 25}px`;
    clickEffect.style.top = `${y - 25}px`;
    clickEffect.style.opacity = '1';
    setTimeout(() => { clickEffect.style.opacity = '0'; }, 300);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
    if (currentEnemyHealth <= 0) {
        defeatEnemy();
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤—Ä–∞–≥–∞
function updateEnemyHealth() {
    const healthPercent = (currentEnemyHealth / maxEnemyHealth) * 100;
    healthElement.style.width = `${healthPercent}%`;
}

// –ü–æ–±–µ–¥–∞ –Ω–∞–¥ –≤—Ä–∞–≥–æ–º
function defeatEnemy() {
    energy += maxEnemyHealth / 10;
    enemyDefeated++;
    updateStats();

    // –ù–æ–≤—ã–π –≤—Ä–∞–≥
    currentEnemyHealth = maxEnemyHealth = 100 + (level * 20);
    updateEnemyHealth();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
    if (enemyDefeated >= 5) {
        levelUp();
    }
}

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
function levelUp() {
    level++;
    enemyDefeated = 0;
    levelElement.textContent = level;
    unlockNewWeapons();
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ä—É–∂–∏—è
function unlockNewWeapons() {
    weaponsContainer.innerHTML = '';
    weapons.forEach(weapon => {
        if (weapon.owned || weapon.cost > energy) return;
        const weaponElement = document.createElement('div');
        weaponElement.className = 'weapon';
        weaponElement.innerHTML = `
            <div style="font-size: 2rem;">${weapon.img}</div>
            <h3>${weapon.name}</h3>
            <p>–£—Ä–æ–Ω: +${weapon.damage}</p>
            <p>–¶–µ–Ω–∞: ${weapon.cost} —ç–Ω–µ—Ä–≥–∏–∏</p>
        `;
        weaponElement.addEventListener('click', () => {
            if (energy >= weapon.cost) {
                energy -= weapon.cost;
                weapon.owned = true;
                clickDamage += weapon.damage;
                updateStats();
                weaponElement.style.borderColor = '#00ff00';
            }
        });
        weaponsContainer.appendChild(weaponElement);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    energyElement.textContent = Math.floor(energy);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    updateStats();
    unlockNewWeapons();
}

initGame();
